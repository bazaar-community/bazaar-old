# This file is for listing TODOs for branches that are being worked on.
# It should ALWAYS be empty in the mainline or in integration branches.
# 
#

Related Bugs:
=============

.BASE, .THIS, .OTHER, .moved can't be added nor committed.
https://bugs.edge.launchpad.net/bzr/+bug/414589

https://bugs.edge.launchpad.net/bzr/+bug/236724
https://bugs.edge.launchpad.net/bzr/+bug/228506
https://bugs.edge.launchpad.net/bzr/+bug/113809
https://bugs.edge.launchpad.net/bzr/+bug/322767
https://bugs.edge.launchpad.net/bzr/+bug/416903
https://bugs.edge.launchpad.net/bzr/+bug/355964

Implement --keep-mine, --take-theirs
https://bugs.edge.launchpad.net/bzr/+bug/257297
https://bugs.edge.launchpad.net/bzr/+bug/232512

https://bugs.edge.launchpad.net/bzr/+bug/457793

TODO:
=====

- check we have a bug about resolve actions for text conflicts

- file a bug about more conflicts that *can* be handled by --auto
  (at least some content conflicts can)

- make sure .moved files can't be committed !

- tests with '.diverted' files ?

Overall presentation:
=====================

Providing the ``--interactive`` option to ``bzr resolve`` will
display a short explanation of the conflict and propose some
actions before marking the file as resolved.


Design:
=======

The Conflict classes will receive additional methods to resolve
the conflict in alternative ways.

Resolve will receive a ``--interactive`` option and present a
list of possible actions (including do nothing) to the user
before marking the file as resolved.

The --all and file* parameters will still be honored so that the
user solve conflicts at his own pace.

It should be possible for a GUI to query the conflict objects for
possible actions (in textual form) and trigger them.


Proposed actions by conflict type:
==================================

The following paragraphs list all the existing conflict types and summarize:
- the actions that can be proposed to the user,
- the cleanups that could remain to be done once the conflict is solved,

In practice, the actions will always contain:
- leave the user solve the conflict by its own means,
- mark the conflict as solved without any additional action.

Unversioned parent
------------------

bzr made a choice: version the parent

3 ways:
- bzr rm <children>
- bzr rm <parent>
- manually rename <children>

resolve:
- nothing more to do than removing the conflicted objects that
   have been created


Missing parent
--------------

bzr made a choice: create the missing parent and version it.

3 ways:
- bzr rm <children>
- bzr rm <parent>
- manually rename <children>

resolve:
- nothing to do, nothing more than the conflicted objects have been created


Deleting parent
---------------

bzr made a choice: not delete the parent

3 ways:
- bzr rm <children>
- bzr rm <parent>
- manually solve the issue (may be more than a single children)

resolve:
- nothing to do


Path conflict
-------------

bzr made a choice: use the source's name

3 ways:
- do nothing (accept bzr choice)
- bzr mv <item> other-name (refuse bzr choice)
- manually rename to a different name

resolve:
- nothing to do 

Parent loop
-----------

bzr made a choice: keep the existing renaming

3 ways:
- do nothing (accept bzr choice)
- bzr mv this_parent/this_children other_parent/other_children
- manually rename the items

resolve:
- nothing to do


Non-directory parent
--------------------

bzr made a choice: create a <parent>.new directory

There is no obvious single action that can solve the conflict
here, but let's try anyway.

3 ways:
- bzr rm <parent>.new
- bzr rm <parent> + bzr mv <parent>.new <parent>
- manually rename the items

resolve:
- nothing to do
