Managing the Bazaar PPA
=======================

See also: `Bazaar Developer Document Catalog <index.html>`_.


Background
----------

We build Ubuntu ``.deb`` packages for Bazaar as an important part of the release
process.  These packages are hosted in a few `Personal Package Archives (PPA)`__ on
Launchpad.

  __ https://help.launchpad.net/PPAQuickStart

As of June 2008, there are three PPAs:

<https://launchpad.net/~bzr/+archive>
    Final released versions.

<https://launchpad.net/~bzr-beta-ppa/+archive>
    Releases and release candidates.    

<https://launchpad.net/~bzr-nightly-ppa/+archive>
    Automatic nightly builds from trunk.

We build packages for every supported Ubuntu release
<https://wiki.ubuntu.com/Releases>.  Packages need no longer be updated
when the release passes end-of-life because all users should
have upgraded by then.  (As of May 2008, Edgy Eft is no longer supported.)

We build a distinct package for each distrorelease.  As of bzr 1.5, Dapper
uses ``python-support`` and later distributions use ``python-central``.
If you upload a release-specific version, you should add a suffix to the
package version, e.g. ``bzr.1.3-1~bazaar1~dapper1``.

Every package is first uploaded into the beta ppa.  For final release
versions it is also copied to the main PPA.

The packaging information is kept in branches of bzr on Launchpad, named
like 
<https://code.launchpad.net/~bzr/bzr/packaging-hardy>.
or
<lp:~bzr/bzr/packaging-hardy>.  These branches are intended to be used
with the ``bzr-builddeb`` plugin.

Preconditions
-------------
  
* You must have a Launchpad account and be a member of the teams 
  that own these PPAs (``~bzr``, ``~bzr-beta-ppa``).

* You must have a GPG key registered to your Launchpad account.

* Configure ``dput`` to upload to our PPA with this section in your
  ``~/.dput.cf``::

    [bzr-beta-ppa]
    fqdn = ppa.launchpad.net
    method = ftp
    incoming = ~bzr-beta-ppa/ubuntu
    login = anonymous
    allow_unsigned_uploads = 0

    [bzr-ppa]
    fqdn = ppa.launchpad.net
    method = ftp
    incoming = ~bzr/ubuntu
    login = anonymous
    allow_unsigned_uploads = 0

  You may also want to add these lines to prevent inadvertently attempting
  to upload into Ubuntu or Debian, which will give a somewhat unclear
  error::

    [DEFAULT]
    default_host_main = notspecified
  
* Configure ``bzr-builddeb`` to sign the package, which is required for
  Launchpad to build it.  Put this in ``~/.bazaar/builddeb.conf`` ::

      [BUILDDEB]
      builder = dpkg-buildpackage -rfakeroot
      source-builder= dpkg-buildpackage -rfakeroot -S -sa

* You need a Ubuntu (or probably Debian) machine, and ::

    sudo apt-get install build-essential devscripts dput quilt patch

* You will also want to have the `bzr-builddeb`_ plugin installed, which
  depends on `bzrtools`_.

.. _`bzr-builddeb`: http://launchpad.net/bzr-builddeb
.. _`bzrtools`: http://launchpad.net/bzrtools


Packaging Bazaar
----------------

Short form
~~~~~~~~~~

For people who have already set up everything they need, building the
release packages is as simple as::

  cd ~/dev/bzr/releases/packaging
  ln ~/dev/bzr/Releases/bzr-1.6.tar.gz ./bzr_1.6.orig.tar.gz
  export UBUNTU_RELEASES="dapper feisty gutsy hardy intrepid"
  ~/dev/bzr/bzr.dev/tools/packaging/update-packaging-branches.sh
  ~/dev/bzr/bzr.dev/tools/packaging/update-changelogs.sh 1.6~beta3-1~bazaar1
  ~/dev/bzr/bzr.dev/tools/packaging/build-packages
  dput bzr-beta-ppa bzr_1.6~beta3-1~bazaar1*.changes

Long Form
~~~~~~~~~

#. You will end up checking out a separate directory for each supported
   release. Such as ``~/dev/bzr/releases/packaging/hardy``

#. Decide on the final version number.  It should be of this form::

     bzr-1.6~beta3-1~bazaar1~hardy1

   **Note:** There are three hyphen-separated parts: the *package name*,
   the *upstream version*, and the *packaging version*.

   **Caution:** Upstream betas or release candidates must insert a tilde
   to make them sort before the final release, like this:
   ``bzr-1.6~beta3-1~bazaar1~hardy1``.

   Final releases will use a release string of the form:
   ``bzr-1.6-1~bazaar1~hardy1``

#. Export the distroreleases that you will be packaging for::

      export UBUNTU_RELEASES="dapper feisty gutsy hardy intrepid"

#. Checkout (or update) the packaging branch for each supported release::

      bzr co lp:~bzr/bzr/packaging-hardy

   There is a script available to help::

      tools/packaging/update-packaging-branches.sh

#. The ``bzr-builddeb`` step will download the original tarball if you do
   not already have it, putting it into a ``tarballs`` directory.

#. For Bazaar plugins, change the ``debian/control`` file to express a
   dependency on the correct version of ``bzr``.

   For bzrtools this is typically::

      Build-Depends-Indep: bzr (>= 1.6~), rsync
      Depends: ${python:Depends}, bzr (>= 1.6~), bzr (<< 1.7~), patch

#. Make a new ``debian/changelog`` entry for the new release,
   either by using ``dch`` or just editing the file::

      dch -v '1.6~beta3-1~bazaar1~hardy1' -D hardy

   dch will default to the distro you're working in and this isn't checked
   against the version number (which is just our convention), so make sure 
   to specify it.

   Make sure you have the correct email address for yourself, version
   number, and distribution.  It should look something like this::

       bzr (1.6~beta3-1~bazaar1~hardy1) hardy; urgency=low
     
        * New upstream release.
     
       -- John Sample <sample@example.com>  Mon, 31 Mar 2008 12:36:27 +1100

   If you need to upload the package again to fix a problem, normally you
   should increment the last number in the version number, following the
   distro name.  Make sure not to omit the initial ``-1``, and make sure
   that the distro name in the version is consistent with the target name
   outside the parenthesis.

   You will also want to commit these changes into the packaging branch.

   There is a helper script which will update the changelog and commit it
   for all of your ``$UBUNTU_RELEASES``. It is available as::

      tools/packaging/update-changelogs.sh

   You must supply the release string, such as::

      tools/packaging/update-changelogs.sh 1.6~beta3-1~bazaar1

   It will automatically append the distro numbering on the end.

#. Build the source packages::

      cd packaging-$DISTRO; bzr builddeb -S

   This will create a ``.changes`` file.  If you didn't configure builddeb
   to automatically sign them, you can use ::

      debsign -m$UID *.changes

   where ``$UID`` is the gpg key you want to use to sign the changes.

#. Upload into the beta PPA for each release::

     dput bzr-beta-ppa bzr_1.6-1*.changes

#. For final release versions, also copy it into the ``~bzr`` PPA::

     dput bzr-ppa ../bzr_1.6-1\~bazaar1\~hardy1\_source.changes

   Alternatively, you can use Launchpad's "copy" feature to copy the
   packages between repositories.

#. You should soon get an "upload accepted" mail from Launchpad, which
   means that your package is waiting to be built.  You can then track its
   progress in <https://launchpad.net/~bzr-beta-ppa/+archive> and
   <https://launchpad.net/~bzr-beta-ppa/+archive/+builds>.


Monitoring the contents of PPAs
-------------------------------

If you add all the bzr PPAs to your ``sources.list`` then you can see a
summary of current package versions with::

  apt-cache madison bzr


..
   vim: filetype=rst textwidth=74 ai shiftwidth=4
