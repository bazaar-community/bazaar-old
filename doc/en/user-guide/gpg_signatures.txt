GnuPG Signatures
=============================

Reasons to Sign Your Repository
--------------------------------

Bazaar can sign revisions using GnuPG, a Free Software implementation of the
OpenPGP digital signature format.  By signing commits a person wanting to
make use of a branch can be confident where the code came from, assuming the
GnuPG keys used can be verified.  This could for example prevent worry about
compromised code in the case where a server hosting Bazaar branches has been
hacked into.  It could also be used to verify that all code is written by a
select group of people, such as if contributor agreements are needed.

Signatures are passed around with commits during branch, push, merge and other
operations.

Setting up GnuPG
--------------

There are many guides to creating a digital signature key with GnuPG.  See
for example the `GnuPG Handbook
<http://www.gnupg.org/gph/en/manual.html#AEN26>`_ or the `Launchpad Wiki
<https://help.launchpad.net/YourAccount/ImportingYourPGPKey>`_.


Signing Commits
---------------

To sign commits as they are made turn on the ``create_signatures``
configuration option in your ``bazaar.conf`` or ``locations.conf`` file::

  create_signatures = always

When you next make a commit it will ask for the pass phrase for your GnuPG key. 
If you want GnuPG to remember your password ensure you have ``gnupg-agent``
installed.

To sign previous commits to a branch use ``sign-my-commits``.  This will go
through all revisions in the branch and sign any which match your
commit name.  You can also pass the name of a contributor to ``sign-my-commits``
to sign someone else's commits or if your GnuPG key does not match your Bazaar
name and e-mail::

  bzr sign-my-commits . "Amy Pond <amy@tardis.com>"

It will not sign commits which already have a signature.

To sign a single commit or a range of commits use the (hidden) command
``re-sign``::

  bzr re-sign -r 24

``re-sign`` is also useful to change an existing signature.

Verifying Commits
-----------------

Unfortunately there is currently no command for verifying signatures.  This can
be done manually using bzrlib and Python::

  >>> from bzrlib.branch import Branch
  >>> b = Branch.open('/home/amy/src/daleks')
  >>> b.last_revision()
  'amy@tardis.com-20110527185938-hluafawphszb8dl1'
  >>> print b.repository.get_signature_text(b.last_revision())
  -----BEGIN PGP SIGNED MESSAGE-----
  Hash: SHA1

  bazaar-ng testament short form 1
  revision-id: amy@tardis.com-20110527185938-hluafawphszb8dl1
  sha1: 6411f9bdf6571200357140c9ce7c0f50106ac9a4
  -----BEGIN PGP SIGNATURE-----
  Version: GnuPG v1.4.11 (GNU/Linux)

  iEYEARECAAYFAk32HFcACgkQpQbm1N1NUIiBXACg6ILsyvJp4+Twq190qk1I4v9K
  PAAAoI8pg9s7uuqldqOwz6/uwH3ezdSX
  =+NcB
  -----END PGP SIGNATURE-----

The signature can be saved to a file and verified with ``gpg --verify
signature.txt``.

The signed SHA1 checksum is made from the ``bzr testament --long`` command
which includes information on the committer and a list of all files in that
commit along with their checksums.  So if the signature is valid you can be
sure you are looking at the same code as the person who made the signature.

Work in Progress
----------------

There is still a number of digital signature related features which are hoped
to be added to Bazaar soon.  These include easy verificiation, qbzr
integration, signing with different keys and setting branches to require
signatures.
