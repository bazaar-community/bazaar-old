####################
Bazaar Release Notes
####################

.. toctree::
   :maxdepth: 1

bzr 2.4b3
#########

:2.4b3: NOT RELEASED YET

External Compatibility Breaks
*****************************

.. These may require users to change the way they use Bazaar.

* ``bzr-2.4`` has officially dropped support for python2.4 and python2.5.
  We will continue to maintain ``bzr-2.3`` for people who still need to
  use those versions of python. (John Arbash Meinel)

New Features
************

.. New commands, options, etc that users may wish to try out.

* The text compressor used for 2a repositories now has a tweakable
  parameter that can be set in bazaar.conf.
  ``bzr.groupcompress.max_entries_per_source`` default of 65536.
  When doing compression, we build up an index of locations to match
  against. Setting this higher will result in slightly better compression,
  at a cost of more memory. Note that a value of 65k represents fully
  sampling a 1MB file. So this only has an effect when compressing texts
  larger than N*16 bytes. (John Arbash Meinel, #602614)

Improvements
************

.. Improvements to existing commands, especially improved performance 
   or memory usage, or better results.

* ``bzr branch --stacked`` from a smart server uses the network a little
  more efficiently.  For a simple branch it reduces the number of
  round-trips by about 20%.  (Andrew Bennetts)

* ``bzr log --line`` scales the width of the author field with the size of
  the line.  This means that the full author name is shown when the
  environment variable BZR_COLUMNS=0.  (Neil Martinsen-Burrell)

* ``bzr pull`` now properly triggers the fast
  ``CHKInventory.iter_changes`` rather than the slow generic
  inter-Inventory changes. It used to use a ``DirStateRevisionTree`` as
  one of the source trees, which is faster when we have to read the whole
  inventory anyway, but much slower when we can get just the delta out of
  the repository. On a 70k record tree, this changes ``bzr pull`` from 28s
  down to 17s. (John Arbash Meinel, #780677)

* Slightly reduced memory consumption when fetching into a 2a repository
  by reusing existing caching a little better.  (Andrew Bennetts)

* Speed up ``bzr status`` by a little bit when there are a couple of
  modified files. We now track how many files we have seen that need
  updating, and only rewrite the dirstate file if enough of them have
  changed. The default is 10, and can be overridden by setting the branch
  option "``bzr.workingtree.worth_saving_limit``".
  (Ian Clatworthy, John Arbash Meinel, #380202)

Bug Fixes
*********

.. Fixes for situations where bzr would previously crash or give incorrect
   or undesirable results.

* All Tree types can now be exported as tar.*, zip or directories.
  (Aaron Bentley)
  
* ``bzr merge --no-remember location`` never sets ``submit_branch``.
  (Vincent Ladeuil, #782169)

* Correct parent is now set when using 'switch -b' with bound branches.
  (A. S. Budden, #513709)

* Fix `bzr plugins` regression in bzr 2.4 which resulted in a traceback
  from writelines on ckj terminals. (Martin [GZ], #754082)

* ``WT.inventory`` and ``WT.iter_entries_by_dir()`` was not correctly
  reporting subdirectories that were tree references (in formats that
  supported them). (John Arbash Meinel, #764677)


Documentation
*************

.. Improved or updated documentation.

* Restore the workaround for option names including dots (--1.14) which was
  disabled when we stopped listing --1.9 as a format.
  (Vincent Ladeuil, #782289)

API Changes
***********

.. Changes that may require updates in plugins or other code that uses
   bzrlib.

* ``annotate_file`` has been deprecated in favor of
  ``annotate_file_revision_tree``. (Jelmer Vernooij, #775598)

* ``Inter.get`` now raises ``NoCompatibleInter`` if there are no
  compatible optimisers rather than an instance of the class it is called
  on. (Jelmer Vernooij)

* New method ``Repository.get_file_graph`` which can return the
  per-file revision graph. (Jelmer Vernooij, #775578)

* The default implementation of ``Branch`` is now oriented to
  storing the branch tip. Branch implementations which store the full
  history should now subclass ``FullHistoryBzrBranch``.
  ``Branch._last_revision_info`` has been renamed to
  ``Branch._read_last_revision_info`` (Jelmer Vernooij)

* ``Tree.__iter__`` has been deprecated; use ``Tree.all_file_ids``
  instead.  (Jelmer Vernooij)

* ``Tree.get_symlink_target`` now takes an optional ``path``
  argument. (Jelmer Vernooij)

Internals
*********

.. Major internal changes, unlikely to be visible to users or plugin 
   developers, but interesting for bzr developers.

Testing
*******

.. Fixes and changes that are only relevant to bzr's test framework and 
   suite.  This can include new facilities for writing tests, fixes to 
   spurious test failures and changes to the way things should be tested.

* Make it easier for plugins to reuse the per_workingtree scenarios by
  restoring the wt_scenarios helper that was accidentally deleted.
  (Vincent Ladeuil, #783472)

bzr 2.4b2
#########

:2.4b2: 2011-04-28

This is the second beta of the 2.4 series, leading to a 2.4.0 release in
August 2011. Beta releases are suitable for everyday use but may cause some
incompatibilities with plugins.

This release includes all bug fixed in previous series known at the time of
this release.


External Compatibility Breaks
*****************************

.. These may require users to change the way they use Bazaar.

* Two command synonyms for ``bzr branch`` have been deprecated, to avoid
  confusion and to allow the names to later be reused.  The removed names
  are: ``get`` and ``clone``.   (Martin Pool, #506265)

New Features
************

.. New commands, options, etc that users may wish to try out.

* ``bzr commit`` now supports a ``--lossy`` argument that can be used
  to discard any data that can not be natively represented when committing
  to a foreign VCS. (Jelmer Vernooij, #587721)

Improvements
************

.. Improvements to existing commands, especially improved performance 
   or memory usage, or better results.

* ``bzr merge`` in large trees is now significantly faster. On a 70k entry
  tree, the time went from ~3min down to 30s. This also effects ``bzr pull``
  and ``bzr update`` since they use the same merge logic to update the
  WorkingTree.  (John Arbash Meinel, #759091)

* ``bzr revert`` now properly uses ``bzr status``'s optimized
  ``iter_changes``. This can be a significant performance difference (33s
  to 5s on large trees). (John Arbash Meinel, #759096)

* Resolve ``lp:FOO`` urls locally rather than doing an XMLRPC request if
  the user has done ``bzr launchpad-login``. The bzr+ssh URLs were already
  being handed off to the remote server anyway (xmlrpc has been mapping
  ``lp:bzr`` to ``bzr+ssh://bazaar.launchpad.net/+branch/bzr``, rather
  than ``bzr+ssh://bazaar.launchpad.net/~bzr-pqm/bzr/bzr.dev`` for a few
  months now.) By doing it ourselves, we can cut out substantial startup
  time. From Netherlands to London it was taking 368ms to do the XMLRPC
  call as much as 2s from Sydney. You can test the local logic by using
  ``-Dlaunchpad``.  (John Arbash Meinel, #397739)

* When building a new WorkingTree (such as during ``bzr co`` or
  ``bzr branch``) we now properly store the stat and hash of files that
  are old enough. This saves a fair amount of time on the first
  ``bzr status`` (on a 500MB tree, it saves about 30+s).
  (John Arbash Meinel, #740932)


Bug Fixes
*********

.. Fixes for situations where bzr would previously crash or give incorrect
   or undesirable results.

* Arguments that can't be decoded to unicode in the current posix locale give
  a clearer error message without a traceback. (Martin [gz], #745712)

* ``bzrlib.log._DEFAULT_REQUEST_PARAMS`` is no longer accidentally
  mutated by ``bzrlib.log._apply_log_request_defaults``.  In practice
  these default values aren't relied on very often so this probably
  wasn't causing any trouble.  (Andrew Bennetts)

* ``bzr log`` now works on revisions which are not in the current branch.
  (Matt Giuca, #241998)

* Don't rewrite the dirstate file when non-interesting changes have
  occurred. This can significantly improve 'bzr status' times when there
  are only small changes to a large tree.
  (Ian Clatworthy, John Arbash Meinel, #380202)

* Lazy hooks are now reset between test runs. (Jelmer Vernooij, #745566)

* ``bzrlib.merge.Merge`` now calls ``iter_changes`` without
  ``include_unversioned=True``. This makes it significantly faster in many
  cases, because it only looks at modified files, rather than building
  information about all files. This can cause failures in other
  TreeTransform code, because it had been expecting to know the names of
  things which had not changed (such as parent directories). All cases we
  know about so far have been fixed, but there may be fallout for edge
  cases that we are missing. (John Arbash Meinel, #759091)

* ``SFTPTransport`` is more pro-active about closing file-handles. This
  reduces the chance of having threads fail from async requests while
  running the test suite. (John Arbash Meinel, #656170)

* Standalone bzr.exe installation on Windows: user can put additional python 
  libraries into ``site-packages`` subdirectory of the installation directory,
  this might be required for "installing" extra dependencies for some plugins.
  (Alexander Belchenko, #743256)

* ``transform.revert()`` has been updated to use
  ``wt.iter_changes(basis_tree)`` rather than
  ``basis_tree.iter_changes(wt)``. This allows the optimized code path to
  kick in, improving ``bzr revert`` times significantly (33s to 4s on
  large trees, 0.7s to 0.3s on small trees.) (John Arbash Meinel, #759096)

* ``TreeTransform.create_file/new_file`` can now take an optional ``sha1``
  parameter. If supplied, when the transform is applied, it will then call
  ``self._tree._observed_sha1`` for those files. This lets us update the
  hash-cache for content that we create, preventing us from re-reading the
  content in the next ``bzr status``.  (John Arbash Meinel, #740932)

Documentation
*************

* Added a section about using a shared SSH account on a server for bzr+ssh
  access.  (Russell Smith)

* The documentation now recommends using SSH rather than SFTP in the
  tutorials and the examples, because that will generally be much faster
  and better in cases where it can be used.  SFTP is still available and
  mentioned as an alternative.  (Martin Pool, #636712)

API Changes
***********

.. Changes that may require updates in plugins or other code that uses
   bzrlib.

* ``Branch.update_revisions`` has been made private and should no
  longer be used by external users. Use ``Branch.pull`` or ``Branch.push``
  instead. (Jelmer Vernooij, #771765)

* Commands now have an `invoked_as` attribute, showing the name under
  which they were called before alias expansion.
  (Martin Pool)

* ``Hooks.create_hook`` is now deprecated in favour of ``Hooks.add_hook``.
  (Jelmer Vernooij)

* If you call `bzrlib.initialize` but forget to enter the resulting object
  as a context manager, bzrlib will now be initialized anyhow.
  (Previously simple programs calling bzrlib might find the library was
  mysteriously silent.)
  (Martin Pool)

* Inventory-specific functionality has been split out of ``Tree`` into
  a new ``InventoryTree`` class. Tree instances no longer
  necessarily provide an ``inventory`` attribute. (Jelmer Vernooij)

* Inventory-specific functionality has been split out of ``RevisionTree``
  into a new ``InventoryRevisionTree`` class. RevisionTree instances no
  longer necessarily provide an ``inventory`` attribute. (Jelmer Vernooij)

* New method ``Hooks.uninstall_named_hook``. (Jelmer Vernooij, #301472)

* ``revision_graph_can_have_wrong_parents`` is now an attribute
  on ``RepositoryFormat`` rather than a method on ``Repository``.
  (Jelmer Vernooij)

* ``Testament`` now takes a ``tree`` rather than an
  ``inventory``. (Jelmer Vernooij, #762608)

* ``TestCase.failUnlessExists`` and ``failIfExists`` are deprecated in
  favour of ``assertPathExists`` and ``assertPathDoesNotExist`` 
  respectively.
  (Martin Pool)

* The ``revno`` parameter of ``log.LogRevision`` may now be None,
  representing a revision which is not in the current branch.
  (Matt Giuca, #241998)

* The various knit pack repository format classes have been moved
  from ``bzrlib.repofmt.pack_repo`` to
  ``bzrlib.repofmt.knitpack_repo``. (Jelmer Vernooij)

* ``RevisionTree`` now has a new method ``get_file_revision``.
  (Jelmer Vernooij)

* ``WorkingTree`` no longer provides an ``inventory``. Instead,
  all inventory-related functionality is now on the subclass
  ``InventoryWorkingTree`` that all native Bazaar working tree
  implementations derive from. (Jelmer Vernooij)

Internals
*********

.. Major internal changes, unlikely to be visible to users or plugin 
   developers, but interesting for bzr developers.

* Added ``osutils.lstat`` and ``osutils.fstat``. These are just the ``os``
  functions on Linux, but they are wrapped on Windows so that fstat
  matches lstat results across all python versions.
  (John Arbash Meinel)

* ``WorkingTree._observed_sha1`` also updates the 'size' column. It
  happened to be updated as a side-effect of commit, but if we start using
  the function elsewhere we might as well do it directly.
  (John Arbash Meinel)

Testing
*******

.. Fixes and changes that are only relevant to bzr's test framework and 
   suite.  This can include new facilities for writing tests, fixes to 
   spurious test failures and changes to the way things should be tested.

* Stop using `failIf`, `failUnless`, `failIfEqual`, etc, that give
  `PendingDeprecationWarnings` on Python2.7. 
  (Martin Pool, #760435)


bzr 2.4b1
#########

:2.4b1: 2011-03-17

This is the first beta of the 2.4 series, leading up to a 2.4.0
release in August 2011.  Beta releases are suitable for everyday use
but may cause some incompatibilities with plugins.  Some plugins may need
small updates to work with 2.4b1.

External Compatibility Breaks
*****************************

(none)

New Features
************

* Added ``changelog_merge`` plugin for merging changes to ``Changelog`` files
  in GNU format.  See ``bzr help changelog_merge`` for details.
  (Andrew Bennetts)
  
* Configuration options can now use references to other options in the same
  file by enclosing them with curly brackets (``{other_opt}``). This makes it
  possible to use, for example,
  ``push_location=lp:~vila/bzr/config-{nickname}`` in ``branch.conf`` when
  using a loom. During the beta period, the default behaviour is to disable
  this feature. It can be activated by declaring ``bzr.config.expand = True``
  in ``bazaar.conf``. (Vincent Ladeuil)

* External merge tools can now be configured in bazaar.conf. See
  ``bzr help configuration`` for more information.  (Gordon Tyler, #489915)

* The ``lp:`` directory service now supports Launchpad's QA staging.
  (Jelmer Vernooij, #667483)

Improvements
************

* A new hidden command ``bzr repair-workingtree``. This is a way to force
  the dirstate file to be rebuilt, rather than using a ``bzr checkout``
  workaround. (John Arbash Meinel)

* Added a ``Branch.heads_to_fetch`` RPC to the smart server protocol.
  This allows formats from plugins (such as looms) to efficiently tell the
  client which revisions need to be fetched.  (Andrew Bennetts)

* Branching, merging and pulling a branch now copies revisions named in
  tags, not just the tag metadata.  (Andrew Bennetts, #309682)

* ``bzr cat-revision`` no longer requires a working tree.
  (Jelmer Vernooij, #704405)

* ``bzr export --per-file-timestamps`` for .tar.gz files will now
  override the mtime for trees exported on Python 2.7 and later, which
  expose the 'mtime' field in gzip files. This makes the output of
  ``bzr export --per-file-timestamps`` for a particular tree
  deterministic.  (Jelmer Vernooij, #711226)

* ``bzr export --format=zip`` can now export to standard output,
  like the other exporters can. (Jelmer Vernooij, #513752)

* ``bzr export`` can now create ``.tar.xz`` and ``.tar.lzma`` files.
  (Jelmer Vernooij, #551714)

* Getting all entries from ``CHKInventory.iter_entries_by_dir()`` has been
  sped up dramatically for large trees. Iterating by dir is not the best
  way to load data from a CHK inventory, so it preloads all the items in
  the correct order. (With the gcc-tree, this changes it (re)reading 8GB
  of CHK data, down to just 150MB.) This has noticeable affects for things
  like building checkouts, etc.  (John Arbash Meinel, #737234)

Bug Fixes
*********

* A MemoryError thrown on the server during a remote operation will now be
  usefully reported, and other unexpected errors will include the class name.
  (Martin [gz], #722416)

* ``bzr annotate -r-1 file`` will now properly annotate a deleted file.
  (Andrew King, #537442)

* ``bzr export`` to zip files will now set a mode on directories.
  (Jelmer Vernooij, #207253)

* ``bzr export`` to tgz files will only write out the basename of the
  tarfile to the gzip file. (Jelmer Vernooij, #102234)

* ``bzr push --overwrite`` with an older revision specified will now correctly
  roll back the target branch. (Jelmer Vernooij, #386576)

* ``bzr lp-propose`` can now propose merges against packaging branches on
  Launchpad without requiring the target branch to be specified.
  (Jelmer Vernooij, #704647)

* ``bzr lp-propose`` no longer requires a reviewer to be specified. It will
  instead leave setting the reviewer up to Launchpad if it was not specified.
  (Jelmer Vernooij, #583772)

* ``bzr pull`` will now exit with exit code 1 if there were tag conflicts.
  (Jelmer Vernooij, #213185)

* ``bzr mv`` user errors no longer throw UnicodeEncodeError with non-ascii
  paths, however they may still print junk if not on a UTF-8 terminal.
  (Martin [gz], #707954)

* ``bzr reconfigure --unstacked`` now copies revisions (and their
  ancestors) named in tags into the unstacked repository, not just the
  ancestry of the branch's tip.  (Andrew Bennetts, #401646)

* ``bzr serve`` no longer crashes when a server_started hook is installed and
  IPv6 support is available on the system. (Jelmer Vernooij, #293697)

* ``bzr status`` will not rewrite the dirstate file if it only has
  'trivial' changes. (Currently limited to dir updates and newly-added
  files changing state.) This saves a bit of time for regular operations.
  eg. ``bzr status`` in a 100k tree takes 1.4s to compute the status, but 1s
  to re-save the dirstate file. (John Arbash Meinel, #765881)

* ``bzr tags`` will no longer choke on branches with ghost revisions in
  their mainline and tags on revisions not in the branch ancestry. 
  (Jelmer Vernooij, #397556)

* ``bzr whoami`` will now display an error if both a new identity and
  ``--email`` were specified. (Jelmer Vernooij, #680449)

* ``launchpadlib`` doesn't provide the ``uris`` module in some old versions.
  (Vincent Ladeuil, #706835)

* Empty entries in the ``NO_PROXY`` variable are no longer treated as matching
  every host.
  (Martin Pool, #586341)

* Plugins incompatible with the current version of bzr no longer produce a
  warning on every command invocation.  Instead, a message is shown by
  ``bzr plugins`` and in crash reports.
  (#704195, Martin Pool)

* The "pretty" version of ``needs_read_lock`` and ``needs_write_lock`` now
  preserves the identity of default parameter values.
  (Andrew Bennetts, #718569)

* ``bzr dump-btree --raw`` no longer tracebacks on a B-Tree file
  containing no rows. (Eric Siegerman, #715508)

* Fix ``bzr lp-mirror`` to work on command line branch URLs and branches
  without an explicit public location. (Max Bowsher)

* On Python 2.6 and higher, use multiprocessing.cpu_count() to retrieve the
  number of available processors. (Jelmer Vernooij, #693140)

API Changes
***********

* Added ``Branch.heads_to_fetch`` method.  Implementations of the Branch API
  must now inherit or implement this method.  (Andrew Bennetts, #721328)
  
* Added ``bzrlib.mergetools`` module with helper functions for working with
  the list of external merge tools. (Gordon Tyler, #489915)

* All methods and arguments that were deprecated before 2.0
  have been removed. (Jelmer Vernooij)

* Branch formats should now be registered on the format registry
  (``bzrlib.branch.format_registry``) rather than using the class
  methods on ``BranchFormat``. (Jelmer Vernooij, #714729)

* ``Branch.set_revision_history`` is now deprecated.
  (Jelmer Vernooij)

* ``BranchFormat.supports_leaving_lock()`` and
  ``RepositoryFormat.supports_leaving_lock`` flags have been added.
  (Jelmer Vernooij)

* ``Branch.fetch`` implementations must now accept an optional
  ``fetch_tags`` keyword argument. (Andrew Bennetts)

* ``Branch.import_last_revision_info`` is deprecated.  Use the
  ``import_last_revision_info_and_tags`` method instead.
  (Andrew Bennetts)

* Because it was too specific to BzrDir implementations,
  ``ControlDir.sprout`` no longer has a default implementation; it now
  raises ``NotImplementedError``. (Jelmer Vernooij, #717937)

* ``bzrlib.deprecated_graph`` has been removed. ``bzrlib.graph``
  scales better tree and should be used instead.
  (Jelmer Vernooij, #733612)

* ``ControlDirFormat.register_format`` has been removed. Instead,
  ``Prober`` implementations should now implement a ``known_formats``
  method. (Jelmer Vernooij)

* ControlDirFormats can now provide a ``check_status`` method and
  raise a custom exception or warning when an unsupported or deprecated
  format is being opened.  (Jelmer Vernooij, #731311)

* ``bzrlib.revionspec.dwim_revspecs`` is deprecated.
  Use ``bzrlib.revisionspec.RevisionSpec_dwim.append_possible_revspec`` and
  ``bzrlib.revisionspec.RevisionSpec_dwim.append_possible_lazy_revspec``
  instead.  (Jelmer Vernooij, #721971)

* ``BzrDirFormat`` has a new attribute ``fixed_components`` that
  indicates whether the components of the bzrdir can be upgraded
  independent of the ``BzrDir``. (Jelmer Vernooij)

* ``BzrProber.register_format`` and ``BzrProber.unregister_format`` are
  now deprecated in favour of the ``BzrProber.formats`` format registry.
  (Jelmer Vernooij)

* ``ControlDir`` implementations no longer have to provide the
  ``get_branch_transport``, ``get_workingtree_transport`` and
  ``get_repository_transport`` methods.  (Jelmer Vernooij, #730325)

* ``Converter`` has been moved from ``bzrlib.bzrdir`` to
  ``bzrlib.controldir``. (Jelmer Vernooij)

* Repository formats can now provide
  ``_get_extra_interrepo_test_combinations`` in the same module 
  to provide extra test combinations for ``bzrlib.tests.per_repository``.
  (Jelmer Vernooij)

* Repository formats should now be registered on the format registry
  (``bzrlib.repository.format_registry``) rather than using the class
  methods on ``RepositoryFormat``. (Jelmer Vernooij)

* Repository formats can now indicate they do not support the full
  VersionedFiles API by setting the ``supports_full_versioned_files``
  attribute to False. A subset of the VersionedFiles API
  (signatures and text graphs) still needs to be supported.
  (Jelmer Vernooij)

* Repository formats have a new method ``is_deprecated`` that
  implementations can override to return True to trigger a deprecation
  warning. (Jelmer Vernooij)

* The ``revision_id`` parameter of
  ``Repository.search_missing_revision_ids`` and
  ``InterRepository.search_missing_revision_ids`` is deprecated.  It is
  replaced by the ``revision_ids`` parameter.  (Andrew Bennetts)

* Working tree formats should now be registered on the format registry
  (``bzrlib.working_tree.format_registry``) rather than using the class
  methods on ``WorkingTreeFormat``. (Jelmer Vernooij, #714730)

Internals
*********

* ``CatchingExceptionThread`` (formerly ThreadWithException) has been moved
  out of the ``bzrlib.tests`` hierarchy to make it clearer that it can be used
  outside of tests. This class makes it easier to track exceptions in threads
  by catching them so they can be re-raised in the controlling thread. It's
  available in the ``bzrlib.cethread`` module.  (Vincent Ladeuil)

* Correctly propogate malloc failures from diff-delta.c code as MemoryError
  so OOM conditions during groupcompress are clearly reported. This entailed a
  change to several function signatures. (Martin [gz], #633336)

* ``HookPoint.lazy_hook`` and ``Hooks.install_named_lazy_hook`` can install 
  hooks for which the callable is loaded lazily.  (Jelmer Vernooij)

Testing
*******

* The Range parsing for HTTP requests will correctly parse incomplete ranges.
  (Vincent Ladeuil, #731240)

..
   vim: tw=74 ft=rst ff=unix
