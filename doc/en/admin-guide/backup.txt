Back-up and Restore
===================

Backing up Bazaar branches can be done in two different ways.  If an existing
filesystem-based backup scheme already exists, then it can easily be used
where the Bazaar branches reside.  Alternately, Bazaar itself can be used to
mirror the desired branches to or from another location for backup purposes.

Filesystem Backups
------------------

Bazaar transactions are atomic in the sense that the disk format is such that
it is in a valid state at all times.  If a Bazaar file is copied while some
process is in the midst of writing to that file, then that content is not
referred to by the other on-disk structures until the data is completely
written.  As such, it should be safe to copy Bazaar branches using filesystem
tools at any time.  The only possible drawback to doing this is that the
copied files may contain a small amount of additional content that isn't used
elsewhere in the branch.  A later copy made after that change has fully
completed would contain that whole change.  Bazaar's disk formats are not
specifically tuned to be kind to tape backup methods that prefer to append to
existing files, but they should be reasonably friendly in that regard.  (In
many cases, they do only append to files that already exist.)


Bazaar as its own backup
------------------------

The features that make Bazaar a good distributed version control system also
make it a good choice for backing itself up.  In particular, complete and
consistent copies of any branch can easily be obtained with the ``branch`` and
``pull`` commands.  As a result, a backup process can simply run ``bzr pull``
on a copy of the main branch to fully update that copy.  If this backup
process runs periodically, then the backups will be as current as the last
time that ``pull`` was run.  (This is in addition to the fact
that revisions are immutable in Bazaar so that a prior revision of a branch is
always recoverable from that branch when the revision id is known.)

As an example, consider a separate backup server that stores backups in
``/var/backup``.  On that server, we could initially run

::

  $ cd /var/backup
  $ bzr branch bzr+ssh://server.example.com/srv/bzr/trunk
  $ bzr branch bzr+ssh://server.example.com/srv/bzr/feature-gui

to create the branches on the backup server.  Then, we could regularly (for
example from ``cron``) do

::

  $ cd /var/backup/trunk
  $ bzr pull  # the location to pull from is remembered
  $ cd ../var/backup/feature-gui
  $ bzr pull  # again, the parent location is remembered

The action of pulling from the parent for all branches in some directory is
common enough that there is a plugin to do it.  The `bzrtools`_ plugin
contains a ``multi-pull`` command that does a ``pull`` in all branches under a
specified directory.

.. _bzrtools: http://launchpad.net/bzrtools

With this plugin installed, the above periodically run commands would be

::

  $ cd /var/backup
  $ bzr multi-pull

Note that ``multi-pull`` does a pull in *every* branch in the specified
directory (the current directory by default) and care should be taken that
this is the desired effect.  A simple script could also substitute for the
multi-pull command while also offering greater flexibility.

Bound Branch Backups
~~~~~~~~~~~~~~~~~~~~

When ``bzr pull`` is run regularly to keep a backup copy up to date, then it
is possible that there are new revisions in the original branch that have not
yet been pulled into the backup branch.  To alleviate this problem, we can set
the branches up so that new revisions are *pushed* to the backup rather than
periodically pulling.  One way to do this is using Bazaar's concept of bound
branches, where a commit in one branch happens only when the same commit
succeeds in the branch to which it is `bound`.  As a push-type technology, it
is set up on the server itself rather than on the backup machine.  For each
branch that should be backed up, you just need to use the ``bind`` command to
set the URL for the backup branch.  In our example, we first need to create
the branches on the backup server (we'll use ``bzr push``, but we could as
easily have used ``bzr branch`` from the backup server)

::
  $ cd /srv/bzr/projectx/trunk
  $ bzr push bzr+ssh://backup.example.com/var/backup//trunk
  $ cd ../feature-gui
  $ bzr push bzr+ssh://backup.example.com/var/backup/feature-gui

and then we need to bind the main branches to their backups

::

  $ cd ../trunk
  $ bzr bind bzr+ssh://backup.example.com/var/backup/trunk
  $ cd ../feature-gui
  $ bzr bind bzr+ssh://backup.example.com/var/backup/feature-gui

A branch can only be bound to a single location, so if multiple backups are
desired, then the branches must be chained.  For example on the backup server,
we could bind the backup branches to a separate, remote backup

::

  $ cd /var/backup/trunk
  $ bzr push bzr+ssh://offsite.example.org/projectx-corp/backup/trunk
  $ bzr bind bzr+ssh://offsite.example.org/projectx-corp/backup/trunk
  $ cd ../feature-gui
  $ bzr push bzr+ssh://offsite.example.org/projectx-corp/backup/feature-gui
  $ bzr bind bzr+ssh://offsite.example.org/projectx-corp/backup/feature-gui

Using the `automirror`_ plugin mentioned under `Hooks and Plugins <hooks-plugins.html>`_, one can
also make a push-type backup system that more naturally handles mutliple
backups.  Simply set the ``post_commit_mirror`` option to multiple URLs
separated by commas.  Replicating the above example would mean doing

::

  $ cd /srv/bzr/trunk
  $ echo "post_commit_mirror=bzr+ssh://backup.example.com/var/backup/trunk,\
  bzr+ssh://offsite.example.org/projectx-corp/backup/trunk" >> .bzr/branch/branch.conf
  $ cd ../feature-gui
  $ echo "post_commit_mirror=bzr+ssh://backup.example.com/var/backup/feature-gui,\
  bzr+ssh://offsite.example.org/projectx-corp/backup/feature-gui" >> .bzr/branch/branch.conf

.. _automirror: http://launchpad.net/bzr-automirror

As for any push-type backup strategy that maintains consistency, the downside
of these methods is that all of the backup commits must succeed before the
initial commit can succeed.  If there is a long chain of bound branches, many
mirror branches, or if the bound branch has a slow network connection, then
the delay in the original commit may be unacceptably long.  In this case,
pull-type backups, or a mixed system may be preferable.
