============================
Guidelines for modifying bzr
============================

.. contents::

(The current version of this document is available in the file ``HACKING``
in the source tree, or at http://bazaar-ng.org/hacking.html)

Overall
=======

* New functionality should have test cases.  Preferably write the
  test before writing the code.

  In general, you can test at either the command-line level or the
  internal API level.  Choose whichever is appropriate: if adding a
  new command, or a new command option, then call through run_bzr().
  It is not necessary to do both. Tests that test the command line level
  are appropriate for checking the UI behaves well - bug fixes and
  core improvements should be tested closer to the code that is doing the
  work. Command line level tests should be placed in 'blackbox.py'.

* Before fixing a bug, write a test case so that it does not regress.

* Exceptions should be defined inside bzrlib.errors, so that we can
  see the whole tree at a glance.

* Imports should be done at the top-level of the file, unless there is
  a strong reason to have them lazily loaded when a particular
  function runs.  Import statements have a cost, so try to make sure
  they don't run inside hot functions.

* Module names should always be given fully-qualified,
  i.e. ``bzrlib.hashcache`` not just ``hashcache``.

* Commands should return Non-Zero when they encounter circumstances that
  the user should really pay attention to - which includes trivial shell
  pipelines.

  Recommanded values are 
    0- OK, 
    1- Conflicts in merge-like operations, or changes are present in
       diff-like operations. 
    2- Unrepresentable diff changes (i.e. binary files that we cannot show 
       a diff of).
    3- An error or exception has occured.

Evolving interfaces
-------------------

If you change the behaviour of an API in an incompatible way, please
be sure to change its name as well. For instance, if I add a keyword
parameter to branch.commit - that's fine. On the other hand, if I add
a keyword parameter to branch.commit which is a *required* transaction
object, I should rename the api - i.e. to 'branch.commit_transaction'.

This will prevent users of the old api getting surprising results. 
Instead, they will get an Attribute error as the api is missing, and
will know to update their code. If in doubt, just ask on #bzr.

Documentation
=============

If you change the behaviour of a command, please update its docstring
in bzrlib/commands.py.  This is displayed by the 'bzr help' command.

If you make a user-visible change, please add a note to the NEWS file.
The description should be written to make sense to someone who's just
a user of bzr, not a developer: new functions or classes shouldn't be
mentioned, but new commands, changes in behaviour or fixed nontrivial
bugs should be listed.  See the existing entries for an idea of what
should be done.


API documentation
-----------------

Functions, methods, classes and modules should have docstrings
describing how they are used. 

The first line of the docstring should be a self-contained sentence.

For the special case of Command classes, this acts as the user-visible
documentation shown by the help command.

The docstrings should be formatted as reStructuredText_ (like this
document), suitable for processing using the epydoc_ tool into HTML
documentation.

.. _reStructuredText: http://docutils.sourceforge.net/rst.html
.. _epydoc: http://epydoc.sourceforge.net/



Coding style
============

Please write PEP-8__ compliant code.  

One often-missed requirement is that the first line of docstrings
should be a self-contained one-sentence summary.

__ http://www.python.org/peps/pep-0008.html



Naming
------

Functions, methods or members that are in some sense "private" are given
a leading underscore prefix.  This is just a hint that code outside the
implementation should probably not use that interface.

We prefer class names to be concatenated capital words (``TestCase``)
and variables, methods and functions to be lowercase words joined by
underscores (``revision_id``, ``get_revision``).

For the purposes of naming some names are treated as single compound
words: "filename", "revno".

Consider naming classes as nouns and functions/methods as verbs.


Standard names
--------------

``revision_id`` not ``rev_id`` or ``revid``

Functions that transform one thing to another should be named ``x_to_y``
(not ``x2y`` as occurs in some old code.)


Destructors
-----------

Python destructors (``__del__``) work differently to those of other
languages.  In particular, bear in mind that destructors may be called
immediately when the object apparently becomes unreferenced, or at some
later time, or possibly never at all.  Therefore we have restrictions on
what can be done inside them.

 0. Never use a __del__ method without asking Martin/Robert first.

 1. Never rely on a ``__del__`` method running.  If there is code that
    must run, do it from a ``finally`` block instead.

 2. Never ``import`` from inside a ``__del__`` method, or you may crash the
    interpreter!!

 3. In some places we raise a warning from the destructor if the object
    has not been cleaned up or closed.  This is considered OK: the warning
    may not catch every case but it's still useful sometimes.


Writing output
==============

(The strategy described here is what we want to get to, but it's not
consistently followed in the code at the moment.)

bzrlib is intended to be a generically reusable library.  It shouldn't
write messages to stdout or stderr, because some programs that use it
might want to display that information through a GUI or some other
mechanism.

We can distinguish two types of output from the library:

 1. Structured data representing the progress or result of an
    operation.  For example, for a commit command this will be a list
    of the modified files and the finally committed revision number
    and id.

    These should be exposed either through the return code or by calls
    to a callback parameter.

    A special case of this is progress indicators for long-lived
    operations, where the caller should pass a ProgressBar object.

 2. Unstructured log/debug messages, mostly for the benefit of the
    developers or users trying to debug problems.  This should always
    be sent through ``bzrlib.trace`` and Python ``logging``, so that
    it can be redirected by the client.

The distinction between the two is a bit subjective, but in general if
there is any chance that a library would want to see something as
structured data, we should make it so.

The policy about how output is presented in the text-mode client
should be only in the command-line tool.


Writing tests
=============
In general tests should be placed in a file named testFOO.py where 
FOO is the logical thing under test. That file should be placed in the
tests subdirectory under the package being tested.

For example, tests for merge3 in bzrlib belong in bzrlib/tests/testmerge3.py.
See bzrlib/selftest/testsampler.py for a template test script.


Running tests
=============
Currently, bzr selftest is used to invoke tests.
You can provide a pattern argument to run a subset. For example, 
to run just the whitebox tests, run::

  bzr selftest -v whitebox


Errors and exceptions
=====================

Errors are handled through Python exceptions.  They can represent user
errors, environmental errors or program bugs.  Sometimes we can't be sure
at the time it's raised which case applies.  See bzrlib/errors.py for 
details on the error-handling practices.


Jargon
======

revno
    Integer identifier for a revision on the main line of a branch.
    Revision 0 is always the null revision; others are 1-based
    indexes into the branch's revision history.

:: vim: tw=74 ai
