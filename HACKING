============================
guidelines for modifying bzr
============================

* New functionality should have test cases.  Preferably write the
  test before writing the code.

  In general, you can test at either the command-line level or the
  internal API level.  Choose whichever is appropriate: if adding a
  new command, or a new command option, then call through run_bzr().
  It is not necessary to do both. Tests that test the command line level
  are appropriate for checking the UI behaves well - bug fixes and
  core improvements should be tested closer to the code that is doing the
  work. Command line level tests should be placed in 'blackbox.py'.

* Before fixing a bug, write a test case so that it does not regress.

* Exceptions should be defined inside bzrlib.errors, so that we can
  see the whole tree at a glance.

* Imports should be done at the top-level of the file, unless there is
  a strong reason to have them lazily loaded when a particular
  function runs.  Import statements have a cost, so try to make sure
  they don't run inside hot functions.

* Please write PEP-8__ compliant code.  

  One often-missed requirement is that the first line of docstrings
  should be a self-contained one-sentence summary.

__ http://www.python.org/peps/pep-0008.html

* Module names should always be given fully-qualified,
  i.e. ``bzrlib.hashcache`` not just ``hashcache``.

* If you change the behaviour of an API in an incompatible way, please
  be sure to change its name as well. For instance, if I add a keyword
  parameter to branch.commit - thats fine. On the other hand, if I add
  a keyword parameter to branch.commit which is a *required* transaction
  object, I should rename the api - i.e. to 'branch.commit_transaction'.
  This will prevent users of the old api outside of the tree getting
  surprising results. 
  Instead, they will get an Attribute error as the api is missing, and
  will know to update their code. If in doubt, just ask on #bzr.


Documentation
=============

If you change the behaviour of a command, please update its docstring
in bzrlib/commands.py.  This is displayed by the 'bzr help' command.

If you make a user-visible change, please add a note to the NEWS file.
The description should be written to make sense to someone who's just
a user of bzr, not a developer: new functions or classes shouldn't be
mentioned, but new commands, changes in behaviour or fixed nontrivial
bugs should be listed.  See the existing entries for an idea of what
should be done.



Writing output
==============

(The strategy described here is what we want to get to, but it's not
consistently followed in the code at the moment.)

bzrlib is intended to be a generically reusable library.  It shouldn't
write messages to stdout or stderr, because some programs that use it
might want to display that information through a GUI or some other
mechanism.

We can distinguish two types of output from the library:

 1. Structured data representing the progress or result of an
    operation.  For example, for a commit command this will be a list
    of the modified files and the finally committed revision number
    and id.

    These should be exposed either through the return code or by calls
    to a callback parameter.

    A special case of this is progress indicators for long-lived
    operations, where the caller should pass a ProgressBar object.

 2. Unstructured log/debug messages, mostly for the benefit of the
    developers or users trying to debug problems.  This should always
    be sent through ``bzrlib.trace`` and Python ``logging``, so that
    it can be redirected by the client.

The distinction between the two is a bit subjective, but in general if
there is any chance that a library would want to see something as
structured data, we should make it so.

The policy about how output is presented in the text-mode client
should be only in the command-line tool.

Writing tests
=============
In general tests should be placed in a file named test_FOO.py where 
FOO is the logical thing under test. That file should be placed in the
tests subdirectory under the package being tested.

For example, tests for merge3 in bzrlib belong in bzrlib/tests/test_merge3.py.

Running tests
=============
Currently, bzr selftest is used to invoke tests.
You can provide a pattern argument to run a subset. For example, 
to run just the whitebox tests, run bzr selftest --pattern .*whitebox.*

