#! /usr/bin/env python

# Copyright (C) 2005, 2006, 2007, 2008, 2009 Canonical Ltd
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

"""Bazaar -- a free distributed version-control tool"""

import os
import sys
import warnings

# update this on each release
_script_version = (2, 0, 3)

if __doc__ is None:
    print "bzr does not support python -OO."
    sys.exit(2)
try:
    version_info = sys.version_info
except AttributeError:
    version_info = 1, 5 # 1.5 or older

REINVOKE = "__BZR_REINVOKE"
NEED_VERS = (2, 4)
KNOWN_PYTHONS = ('python2.4', 'python2.5', 'python2.6')

if version_info < NEED_VERS:
    if not os.environ.has_key(REINVOKE):
        # mutating os.environ doesn't work in old Pythons
        os.putenv(REINVOKE, "1")
        for python in KNOWN_PYTHONS:
            try:
                os.execvp(python, [python] + sys.argv)
            except OSError:
                pass
    sys.stderr.write("bzr: error: cannot find a suitable python interpreter\n")
    sys.stderr.write("  (need %d.%d or later)\n" % NEED_VERS)
    sys.exit(1)
if hasattr(os, "unsetenv"):
    os.unsetenv(REINVOKE)


profiling = False
if '--profile-imports' in sys.argv:
    sys.argv.remove('--profile-imports')
    import profile_imports
    profile_imports.install()
    profiling = True

if sys.platform == 'darwin':
    # jameinel says this hack is to force python to honor the LANG setting,
    # even on Darwin.  Otherwise it is apparently hardcoded to Mac-Roman,
    # which is incorrect for the normal Terminal.app which wants UTF-8.
    #
    # "It might be that I should be setting the "system locale" somewhere else
    # on the system, rather than setting LANG=en_US.UTF-8 in .bashrc.
    # Switching to 'posix' and setting LANG worked for me."
    #
    # So we can remove this if someone works out the right way to tell Mac
    # Python which encoding to use.  -- mbp 20080703
    sys.platform = 'posix'
    try:
        import locale
    finally:
        sys.platform = 'darwin'
else:
    import locale


# The python2.6 release includes some libraries that have deprecation warnings
# against the interpreter - see https://bugs.launchpad.net/bzr/+bug/387139
warnings.filterwarnings('ignore',
    r"(struct integer overflow masking is deprecated|"
    r"'L' format requires 0 <= number <= 4294967295)",
    DeprecationWarning,
    'gzip',
    )


try:
    locale.setlocale(locale.LC_ALL, '')
except locale.Error, e:
    sys.stderr.write('bzr: warning: %s\n'
                     '  bzr could not set the application locale.\n'
                     '  Although this should be no problem for bzr itself,\n'
                     '  it might cause problems with some plugins.\n'
                     '  To investigate the issue, look at the output\n'
                     '  of the locale(1p) tool available on POSIX systems.\n'
                     % e)

# instruct bzrlib/__init__.py to install lazy_regex
sys._bzr_lazy_regex = True
try:
    import bzrlib
except ImportError, e:
    sys.stderr.write("bzr: ERROR: "
        "Couldn't import bzrlib and dependencies.\n"
        "Please check the directory containing bzrlib is on your PYTHONPATH.\n"
        "\n")
    raise

if bzrlib.version_info[:3] != _script_version:
    sys.stderr.write("bzr: WARNING: bzrlib version doesn't match the bzr program.\n"
            "This may indicate an installation problem.\n"
            "bzrlib from %s is version %r\n"
            % (bzrlib.__path__, bzrlib.version_info))

import bzrlib.inspect_for_copy
bzrlib.inspect_for_copy.import_copy_with_hacked_inspect()

import bzrlib.breakin
bzrlib.breakin.hook_debugger_to_signal()

import bzrlib.decorators
if ('--lsprof' in sys.argv
    or '--lsprof-file' in sys.argv
    or '--profile' in sys.argv
    or '--lsprof-timed' in sys.argv):
    bzrlib.decorators.use_pretty_decorators()
else:
    bzrlib.decorators.use_fast_decorators()

import bzrlib.commands
import bzrlib.trace


if __name__ == '__main__':
    bzrlib.trace.enable_default_logging()
    exit_val = bzrlib.commands.main()

    if profiling:
        profile_imports.log_stack_info(sys.stderr)

    # run anything registered by atexit, because it won't be run in the normal
    # way
    sys.exitfunc()

    # By this point we really have completed everything we want to do, and
    # there's no point doing any additional cleanup.  Abruptly exiting here
    # stops any background threads getting into trouble as code is unloaded,
    # and it may also be slightly faster, through avoiding gc of objects that
    # are just about to be discarded anyhow.  This does mean that atexit hooks
    # won't run but we don't use them.  Also file buffers won't be flushed,
    # but our policy is to always close files from a finally block. -- mbp 20070215
    try:
        sys.stdout.flush()
        sys.stderr.flush()
    except IOError, e:
        import errno
        if e.errno in [errno.EINVAL, errno.EPIPE]:
            pass
        else:
            raise
    if bzrlib.trace._trace_file:
        # this is also _bzr_log
        bzrlib.trace._trace_file.flush()
    os._exit(exit_val)
else:
    raise ImportError("The bzr script cannot be imported.")
