#! /usr/bin/env python

# Copyright (C) 2005, 2006 by Canonical Ltd

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
"""Bazaar-NG -- a free distributed version-control tool"""

import os
import sys
import time
import sre


if __doc__ is None:
    print "bzr does not support python -OO."
    sys.exit(2)
try:
    version_info = sys.version_info
except AttributeError:
    version_info = 1, 5 # 1.5 or older

REINVOKE = "__BZR_REINVOKE"
NEED_VERS = (2, 4)
KNOWN_PYTHONS = ('python2.4',)

if version_info < NEED_VERS:
    if not os.environ.has_key(REINVOKE):
        # mutating os.environ doesn't work in old Pythons
        os.putenv(REINVOKE, "1")
        for python in KNOWN_PYTHONS:
            try:
                os.execvp(python, [python] + sys.argv)
            except OSError:
                pass
    print >>sys.stderr, "bzr: error: cannot find a suitable python interpreter"
    print >>sys.stderr, "  (need %d.%d or later)" % NEED_VERS
    sys.exit(1)
if hasattr(os, "unsetenv"):
    os.unsetenv(REINVOKE)


_real_import = __import__

def _custom_import(name, globals, locals, fromlist):
    scope_name = globals.get('__name__', None)
    if scope_name is None:
        scope_name = globals.get('__file__', None)
    if scope_name is None:
        scope_name = globals.keys()
    else:
        loc = scope_name.find('bzrlib')
        if loc != -1:
            scope_name = scope_name[loc:]
        loc = scope_name.find('python2.4')
        if loc != -1:
            scope_name = scope_name[loc:]
                
    tstart = time.time()
    mod = _real_import(name, globals, locals, fromlist)
    tload = time.time()-tstart
    frame = sys._getframe(1)
    frame_name = frame.f_globals.get('__name__', '<unknown>')
    extra = ''
    cur_frame = 1
    if frame_name.endswith('demandload'):
        extra = ' (demandload)'
        frame = sys._getframe(4)
        cur_frame = 4
        frame_name = frame.f_globals.get('__name__', '<unknown>')
    frame_lineno = frame.f_lineno
    sys.stderr.write('%3.0fms %-24s\tfor %-24s\t@ %s:%d%s\n' 
        % ((time.time()-tstart)*1000, name, scope_name,
            frame_name, frame_lineno, extra))
    if tload > 0.01:
        stack = []
        for fnum in range(cur_frame+1, cur_frame+10):
            try:
                f = sys._getframe(fnum)
            except ValueError:
                break
            stack.append('%s:%i' 
                    % (f.f_globals.get('__name__', '<unknown>'),
                        f.f_lineno)
                    )
        if stack:
            sys.stderr.write('\t' + ' '.join(stack) + '\n')
    return mod


_real_compile = sre._compile

def _custom_compile(*args, **kwargs):
    """Time how long it takes to compile a regex"""
    tstart = time.time()
    comp = _real_compile(*args, **kwargs)
    frame = sys._getframe(2)
    frame_name = frame.f_globals.get('__name__', '<unknown>')
    frame_lineno = frame.f_lineno
    sys.stderr.write('%3.0fms %-40r\t@ %s:%d\n'
        % ((time.time()-tstart)*1000, args[0][:40], 
            frame_name, frame_lineno))
    return comp

if '--profile-imports' in sys.argv:
    __builtins__.__import__ = _custom_import
    sre._compile = _custom_compile
    sys.argv.remove('--profile-imports')


try:
    import bzrlib
    import bzrlib.commands
    import bzrlib.trace
except ImportError, e:
    sys.stderr.write("bzr: ERROR: "
                     "Couldn't import bzrlib and dependencies.\n"
                     "Please check bzrlib is on your PYTHONPATH.\n"
                     "\n")
    raise

if bzrlib.version_info[:3] != (0, 9, 0):
    sys.stderr.write("bzr: WARNING: bzrlib version doesn't match the bzr program.\n"
            "This may indicate an installation problem.\n"
            "bzrlib from %s is version %r\n"
            % (bzrlib.__path__, bzrlib.version_info))

if __name__ == '__main__':
    bzrlib.trace.enable_default_logging()
    sys.exit(bzrlib.commands.main(sys.argv))
else:
    pass    # should this give an error? - it can't be used as a lib
